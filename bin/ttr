#!/usr/bin/env python

import sys
import socket
import signal
import logging
from functools import partial
from ttr import server
from ttr.tstlib import TestProgram, TestToolsTestRunner


def load_tests_and_wait(conn):
    stdout = sys.stdout
    program = TestProgram(
        conn,
        argv=[''],
        testRunner=partial(TestToolsTestRunner, stdout=stdout),
        stdout=stdout)


def restart_test_runner():
    server.restart_test_runner(load_tests_and_wait)


def signal_handler(signum, frame):
    logging.debug('signal handler called with signal %s', signum)
    if signum == signal.SIGHUP:
        restart_test_runner()
    elif signum == signal.SIGTERM:
        server.kill()


if __name__ == '__main__':
    logging.basicConfig(
        filename='/tmp/ttr.log',
        level=logging.DEBUG)
    logging.info('=== starting main process')
    restart_test_runner()
    server.start_watcher()
    signal.signal(signal.SIGHUP, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    sock = server.listen(server.ADDRESS)
    while True:
        if server.IS_STOPPED:
            break
        try:
            for tests in server.read_tests(sock):
                server.TEST_RUNNER_CONN.send(tests)
                test_results = server.TEST_RUNNER_CONN.recv()
                logging.debug('inner sock got test results %s', test_results)
                sock.send(test_results)
        except socket.error as e:
            logging.exception(e)
